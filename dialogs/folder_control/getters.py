from aiogram_dialog import DialogManager

from dialogs import general_keyboards
from enums.enums import AccessType
from models.folder_model import Folder
from models.item_model import INVISIBLE_CHAR
from utils.utils_ import smile_folder, smile_item
from utils.utils_access import get_access_users_info, get_user_info, get_access_str_by_type
from utils.utils_data import get_current_folder_id, get_current_lang
from utils.utils_folders import get_folder_statistic
from utils.utils_folders_reader import get_folder_name, get_folder
from utils.utils_handlers import get_folders_message_text
from utils.utils_items_reader import get_folder_items
from utils.utils_parse_mode_converter import escape_markdown


async def get_main_menu_data(dialog_manager: DialogManager, **kwargs):
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    message_text = await get_folders_message_text(user_id, folder_id)
    # message_text = escape_markdown(folders_message_text)
    data = {
        'folder_id': folder_id,
        'message_text': f'üõ† <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–æ–π</b>\n\n{message_text}'
    }
    return data


async def get_message_text(dialog_manager: DialogManager, **kwargs):
    return {"message_text": dialog_manager.current_context().dialog_data.get("message_text", None)}


async def get_start_data_message_text(dialog_manager: DialogManager, **kwargs):
    return {"message_text": dialog_manager.current_context().start_data.get("message_text", None)}


async def get_statistic_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    folder_name = await get_folder_name(user_id, folder_id)
    dict_folder_statistic = await get_folder_statistic(user_id, folder_id)
    folders_count = dict_folder_statistic['folders_count']
    items_count = dict_folder_statistic['items_count']
    deep_folders_count = dict_folder_statistic['deep_folders_count']
    deep_items_count = dict_folder_statistic['deep_items_count']

    statistic_text = (f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫:</i> <b><i>{folders_count}</i></b> {smile_folder}\n"
                      f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</i> <b><i>{items_count}</i></b> {smile_item}\n\n"
                      f"<u>–° —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫:</u>\n"
                      f"<i>–í—Å–µ–≥–æ –ø–∞–ø–æ–∫:</i> <b><i>{deep_folders_count}</i></b> {smile_folder}\n"
                      f"<i>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</i> <b><i>{deep_items_count}</i></b> {smile_item}")

    folder_statistic_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏</b>{INVISIBLE_CHAR * 20}\n\n" \
                            f"{smile_folder} {folder_name}:\n\n" \
                            f"{statistic_text}"

    data['folder_statistic_text'] = folder_statistic_text
    return data


async def get_delete_all_items_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    folder_name = await get_folder_name(user_id, folder_id)
    items_count = len(await get_folder_items(user_id, folder_id))
    if items_count:
        message_text = f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ ({items_count}) –≤ –ø–∞–ø–∫–µ " \
                       f"{smile_folder} {folder_name} ?"
    else:
        message_text = "–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π ü§∑‚Äç‚ôÇÔ∏è"
    data['folder_id'] = folder_id
    data['items_count'] = items_count
    data['message_text'] = message_text
    return data


async def get_rename_data(dialog_manager: DialogManager, **kwargs):
    user_id = dialog_manager.event.from_user.id
    language = await get_current_lang(user_id)
    folder_id = await get_current_folder_id(user_id)
    folder_name = await get_folder_name(user_id, folder_id)
    folder_name = escape_markdown(folder_name)
    message_text = f"*–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É* {smile_folder}" \
                   f"\n\n–ú–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:" \
                   f"\n'`{folder_name}`'" \
                   f"\n\n_*–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:*_"
    data = {
        'user_id': user_id,
        'folder_id': folder_id,
        'message_text': message_text,
        'btn_cancel': general_keyboards.BUTTONS['cancel'].get(language)}
    return data


async def get_delete_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    folder_name = await get_folder_name(user_id, folder_id)
    message_text = f"–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É <b>{smile_folder} {folder_name}</b>\n–∏ –≤—Å–µ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ?"
    data['message_text'] = message_text
    return data


async def get_access_menu_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    folder: Folder = await get_folder(user_id, folder_id)
    switch_inline_query = f'access_{user_id}_{folder_id}'
    users_access_info_str, users_access_info_entities = await get_access_users_info(folder)
    users_access_info = users_access_info_str or '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
    # users_access_info = escape_markdown(users_access_info)
    message_text = f'üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–∞–ø–∫–µ</b>' \
                   f'\n\n{smile_folder} {folder.name}' \
                   f'\n\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø:</i>' \
                   f'\n\n{users_access_info}'

    users_data = []
    if users_access_info_entities:
        for i in range(1):
            for user_data in users_access_info_entities:
                access_icon = '‚úèÔ∏è' if user_data['access_type'] == AccessType.WRITE.value else 'üëÅÔ∏è'
                users_data.append(
                    {
                        "user_id": user_data['user_id'],
                        "number": user_data['number'],
                        "name": f"üë§ {user_data['number']}. {user_data['user_name']} {access_icon}",
                        "access_type": user_data['access_type'],
                        # "name": f"üë§ {i + 1}. {user_data['user_name']} {access_icon}"
                    }
                )

    data['users'] = users_data
    data['folder_id'] = folder_id
    data['folder_name'] = folder.name
    data['folder_has_access_users'] = len(users_data) > 0
    data['switch_inline_query'] = switch_inline_query
    data['message_text'] = message_text
    dialog_manager.current_context().dialog_data = data
    return data


async def get_user_selected_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    dialog_data = dialog_manager.current_context().dialog_data
    user = dialog_data.get('user', None)
    user_name = await get_user_info(user.get('user_id', None))
    folder_name = dialog_data.get('folder_name', '')

    dialog_manager.current_context().dialog_data = dialog_data

    access_srt = get_access_str_by_type(AccessType(user.get('access_type', '')))
    message_text = f'üë§ {user_name}' \
                   f'\n\n–ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø {access_srt} –ø–∞–ø–∫–∏:' \
                   f'\n\n{smile_folder} {folder_name}'
    # f'\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>')

    data['user'] = user
    data['message_text'] = message_text
    return data


async def get_stop_all_users_access_data(dialog_manager: DialogManager, **kwargs):
    data = {}
    user_id = dialog_manager.event.from_user.id
    folder_id = await get_current_folder_id(user_id)
    folder_name = await get_folder_name(user_id, folder_id)
    message_text = (f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ "
                    f"<b>{smile_folder} {folder_name}</b>\n–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?")
    data['message_text'] = message_text
    return data
